{
  "info": {
    "name": "Screenshot API - Test Suite",
    "description": "Automated test collection for Screenshot API SaaS",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "ðŸ§ª Full API Test Suite",
      "item": [
        {
          "name": "1. Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().status).to.equal('OK');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/../health",
              "host": ["{{baseUrl}}"],
              "path": ["..", "health"]
            }
          }
        },
        {
          "name": "2. Register Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.be.an('object');",
                  "    pm.expect(response.token).to.be.a('string');",
                  "    pm.expect(response.apiKey).to.be.a('string');",
                  "    pm.expect(response.user.credits).to.equal(100);",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    pm.environment.set('jwt_token', response.token);",
                  "    pm.environment.set('api_key', response.apiKey);",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for each test run",
                  "const timestamp = Date.now();",
                  "pm.environment.set('test_email', `test${timestamp}@example.com`);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"name\": \"{{test_name}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "3. Take Basic Screenshot",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Screenshot taken successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.screenshot.filePath).to.be.a('string');",
                  "    pm.expect(response.screenshot.size).to.be.above(0);",
                  "    pm.expect(response.processingTime).to.be.a('number');",
                  "    pm.expect(response.creditsRemaining).to.equal(99);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"https://httpbin.org/html\",\n    \"format\": \"png\",\n    \"width\": 1920,\n    \"height\": 1080\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/screenshots",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots"]
            }
          }
        },
        {
          "name": "4. Generate PDF",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('PDF generated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.pdf.filePath).to.be.a('string');",
                  "    pm.expect(response.pdf.format).to.equal('pdf');",
                  "    pm.expect(response.creditsRemaining).to.equal(98);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"https://httpbin.org/html\",\n    \"format\": \"A4\",\n    \"landscape\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/screenshots/pdf",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots", "pdf"]
            }
          }
        },
        {
          "name": "5. Get Request History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('History retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.requests).to.be.an('array');",
                  "    pm.expect(response.requests.length).to.equal(2); // Screenshot + PDF",
                  "    pm.expect(response.pagination).to.be.an('object');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/screenshots/history",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots", "history"]
            }
          }
        },
        {
          "name": "6. Get Usage Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Usage statistics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.month).to.be.a('string');",
                  "    pm.expect(response.requests).to.equal(2);",
                  "    pm.expect(response.creditsRemaining).to.equal(98);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/screenshots/usage",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots", "usage"]
            }
          }
        },
        {
          "name": "7. Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.be.an('object');",
                  "    pm.expect(response.user.apiKeys).to.be.an('array');",
                  "    pm.expect(response.user.credits).to.equal(98);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          }
        },
        {
          "name": "8. Test Rate Limiting",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test may pass or fail depending on rate limits",
                  "pm.test('Rate limiting works', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "    if (pm.response.code === 429) {",
                  "        pm.expect(pm.response.json().error).to.include('Too many');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"https://httpbin.org/html\",\n    \"format\": \"png\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/screenshots",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots"]
            }
          }
        }
      ]
    },
    {
      "name": "ðŸ§ª Error Handling Tests",
      "item": [
        {
          "name": "Invalid API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid API key rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "    pm.expect(pm.response.json().error).to.equal('Invalid API key');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "invalid-key"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"https://example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/screenshots",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots"]
            }
          }
        },
        {
          "name": "Invalid URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid URL rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.expect(pm.response.json().error).to.include('url');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"not-a-valid-url\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/screenshots",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots"]
            }
          }
        },
        {
          "name": "Missing API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Missing API key rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "    pm.expect(pm.response.json().error).to.equal('API key required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"https://example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/screenshots",
              "host": ["{{baseUrl}}"],
              "path": ["screenshots"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('Running test:', pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000);",
          "});",
          "",
          "pm.test('Content-Type is JSON for API responses', function () {",
          "    if (pm.response.headers.get('Content-Type')) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});"
        ]
      }
    }
  ]
}